{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.index = mod.exports;\n  }\n})(this, function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function intToChinese(num, digits, units, minus, isCheque) {\n    var str = '';\n    var n = Math.floor(Math.abs(num));\n    if (n < 1) return (num < 0 ? minus : \"\") + digits[0];\n    var uc = units.slice();\n\n    while (n > 0) {\n      var u = uc.shift();\n      var d = n % 10;\n      str = digits[d] + u + str; //((d > 0) ? u : '') + str;\n\n      n = Math.floor(n / 10);\n    }\n\n    var smallUnit = units[1] + units[2] + units[3];\n    var bigUnit = units[4] + units[8] + units[12] + units[16] + units[20];\n    var zero = digits[0];\n    str = str.replace(new RegExp(\"(\" + zero + \")[\" + smallUnit + \"]\", 'g'), \"$1\") //零千,零百,零十 keeps 零\n    .replace(new RegExp(\"([\" + bigUnit + \"])[^\" + smallUnit + \"]+([\" + bigUnit + \"])\", 'g'), '$1' + zero) //大數中間沒細數，補零\n    .replace(new RegExp(\"([\" + smallUnit + \"])\" + zero + \"+([\" + bigUnit + \"])\", \"g\"), \"$1$2\" + zero).replace(new RegExp(\"(\" + digits[0] + \")+\", \"g\"), \"$1\") //group 零\n    .replace(new RegExp(zero + \"+$\"), \"\"); //tail zero remove\n\n    if (isCheque != true) {\n      //check writing reserve the first \"一\"\n      str = str.replace(new RegExp(\"^\" + digits[1] + units[1]), units[1]); //^一十 == 十\n    }\n\n    return (num < 0 ? minus : \"\") + str;\n  }\n\n  function floatToChinese(num, digits, point) {\n    if (num % 1 == 0) return \"\";\n    var str = '';\n    var f = parseInt(Math.abs(num).toString().replace(/\\d+./i, '1'));\n\n    while (f > 0) {\n      var d = f % 10;\n      str = digits[d] + str;\n      f = Math.floor(f / 10);\n    }\n\n    return point + str.replace(new RegExp(\"^\" + digits[1], \"i\"), \"\");\n  }\n\n  var NC = function () {\n    function NC() {\n      _classCallCheck(this, NC);\n    }\n\n    _createClass(NC, null, [{\n      key: \"toOrdinal\",\n      value: function toOrdinal(num) {\n        return NC.labels.ordinal + num;\n      }\n    }, {\n      key: \"toWords\",\n      value: function toWords(num) {\n        return intToChinese(num, NC.labels.digits, NC.labels.units, NC.labels.minus) + floatToChinese(num, NC.labels.digits, NC.labels.point);\n      }\n    }, {\n      key: \"toWordsOrdinal\",\n      value: function toWordsOrdinal(num) {\n        return NC.labels.ordinal + intToChinese(num, NC.labels.digits, NC.labels.units, NC.labels.minus);\n      }\n    }]);\n\n    return NC;\n  }();\n\n  NC.labels = {\n    digits: ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'],\n    units: ['', '十', '百', '千', '萬', '十', '百', '千', '億', '十', '百', '千', '兆', '十', '百', '千', '京', '十', '百', '千', '垓'],\n    ordinal: \"第\",\n    point: \"點\",\n    minus: \"負\"\n  };\n  exports.default = NC;\n  var NumberToChineseWords = exports.NumberToChineseWords = NC;\n  var toOrdinal = exports.toOrdinal = NC.toOrdinal;\n  var toWords = exports.toWords = NC.toWords;\n  var toWordsOrdinal = exports.toWordsOrdinal = NC.toWordsOrdinal;\n});","map":null,"metadata":{},"sourceType":"script"}