{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotpotman/minialipay-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotpotman/minialipay-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotpotman/minialipay-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotpotman/minialipay-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { nativeFeaturesAvailable } from \"./core\";\n\nvar QrService =\n/*#__PURE__*/\nfunction () {\n  function QrService() {\n    _classCallCheck(this, QrService);\n  }\n\n  _createClass(QrService, [{\n    key: \"scan\",\n    value: function scan() {\n      return new Promise(function (resolve, reject) {\n        window.cordova.plugins.barcodeScanner.scan(function (result) {\n          resolve(result);\n        }, function (error) {\n          reject(error);\n        }, {\n          showFlipCameraButton: false,\n          showTorchButton: true,\n          resultDisplayDuration: 0,\n          formats: \"QR_CODE\"\n        });\n      });\n    }\n  }]);\n\n  return QrService;\n}();\n\nvar MockedService =\n/*#__PURE__*/\nfunction () {\n  function MockedService() {\n    _classCallCheck(this, MockedService);\n  }\n\n  _createClass(MockedService, [{\n    key: \"scan\",\n    value: function () {\n      var _scan = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                value = prompt(\"请输入二维码扫码结果\", \"http://example.com\");\n\n                if (!(!value && value !== \"\")) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  text: \"\",\n                  format: \"\",\n                  cancelled: true\n                });\n\n              case 5:\n                return _context.abrupt(\"return\", {\n                  text: value,\n                  format: \"QR_CODE\",\n                  cancelled: false\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function scan() {\n        return _scan.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return MockedService;\n}();\n\nexport default nativeFeaturesAvailable() ? new QrService() : new MockedService();","map":{"version":3,"sources":["/Users/hotpotman/minialipay-frontend/src/native/QrService.js"],"names":["nativeFeaturesAvailable","QrService","Promise","resolve","reject","window","cordova","plugins","barcodeScanner","scan","result","error","showFlipCameraButton","showTorchButton","resultDisplayDuration","formats","MockedService","value","prompt","text","format","cancelled"],"mappings":";;;;AAAA,SAAQA,uBAAR,QAAsC,QAAtC;;IAEMC,S;;;;;;;;;2BACK;AACH,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,QAAAA,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBC,cAAvB,CAAsCC,IAAtC,CACI,UAAUC,MAAV,EAAkB;AACdP,UAAAA,OAAO,CAACO,MAAD,CAAP;AACH,SAHL,EAII,UAAUC,KAAV,EAAiB;AACbP,UAAAA,MAAM,CAACO,KAAD,CAAN;AACH,SANL,EAOI;AACIC,UAAAA,oBAAoB,EAAE,KAD1B;AAEIC,UAAAA,eAAe,EAAE,IAFrB;AAGIC,UAAAA,qBAAqB,EAAE,CAH3B;AAIIC,UAAAA,OAAO,EAAE;AAJb,SAPJ;AAcH,OAfM,CAAP;AAgBH;;;;;;IAGCC,a;;;;;;;;;;;;;;;;;;AAEMC,gBAAAA,K,GAAQC,MAAM,CAAC,YAAD,EAAe,oBAAf,C;;sBACd,CAACD,KAAD,IAAUA,KAAK,KAAK,E;;;;;iDACb;AACHE,kBAAAA,IAAI,EAAE,EADH;AAEHC,kBAAAA,MAAM,EAAE,EAFL;AAGHC,kBAAAA,SAAS,EAAE;AAHR,iB;;;iDAMC;AACJF,kBAAAA,IAAI,EAAEF,KADF;AAEJG,kBAAAA,MAAM,EAAE,SAFJ;AAGJC,kBAAAA,SAAS,EAAE;AAHP,iB;;;;;;;;;;;;;;;;;;;AAUpB,eAAerB,uBAAuB,KAAK,IAAIC,SAAJ,EAAL,GAAuB,IAAIe,aAAJ,EAA7D","sourcesContent":["import {nativeFeaturesAvailable} from \"./core\";\n\nclass QrService {\n    scan() {\n        return new Promise((resolve, reject) => {\n            window.cordova.plugins.barcodeScanner.scan(\n                function (result) {\n                    resolve(result);\n                },\n                function (error) {\n                    reject(error);\n                },\n                {\n                    showFlipCameraButton: false,\n                    showTorchButton: true,\n                    resultDisplayDuration: 0,\n                    formats: \"QR_CODE\",\n                }\n            );\n        });\n    }\n}\n\nclass MockedService {\n    async scan() {\n        let value = prompt(\"请输入二维码扫码结果\", \"http://example.com\");\n        if (!value && value !== \"\") {\n            return {\n                text: \"\",\n                format: \"\",\n                cancelled: true\n            };\n        } else {\n            return ({\n                text: value,\n                format: \"QR_CODE\",\n                cancelled: false\n            });\n        }\n    }\n}\n\n\nexport default nativeFeaturesAvailable() ? new QrService() : new MockedService();"]},"metadata":{},"sourceType":"module"}